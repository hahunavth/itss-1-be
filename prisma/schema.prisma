generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model coffee_shops {
  id                     Int                      @id @default(autoincrement()) @map("coffee_shop_ID")
  name                   String                   @db.VarChar(50)
  opening_at             DateTime
  closing_at             DateTime
  description            String?                  @default("")
  phone_number           String                   @db.VarChar(10)
  status                 Int
  address                String
  verified               Int
  owner_ID               Int?
  crowded_hours          Int[]                    @default([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  images                 String[]
  bookmarks              bookmarks[]
  coffee_shop_categories coffee_shop_categories[]
  coffee_shop_devices    coffee_shop_devices[]
  user                   users?                   @relation(fields: [owner_ID], references: [id])
  rv_images              images[]
  reviews                reviews[]
}

model users {
  id            Int            @id @default(autoincrement()) @map("user_ID")
  username      String         @db.VarChar(30)
  password      String         @db.VarChar(30)
  email         String         @unique @db.VarChar(30)
  phone_number  String?        @db.VarChar(10)
  date_of_birth DateTime?
  nationality   String         @default("日本") @db.VarChar(30)
  image_url     String?
  role          Int
  bookmarks     bookmarks[]
  coffee_shops  coffee_shops[]
  reviews       reviews[]
}

model reviews {
  id             Int          @id @default(autoincrement()) @map("review_ID")
  review         String
  star           Int
  create_at      DateTime     @default(now())
  coffee_shop_ID Int
  user_ID        Int
  images         images[]
  coffee_shop    coffee_shops @relation(fields: [coffee_shop_ID], references: [id], onDelete: Cascade)
  user           users        @relation(fields: [user_ID], references: [id], onDelete: Cascade)

  // @@unique([coffee_shop_ID, user_ID])
}

model images {
  id             Int          @id @default(autoincrement()) @map("image_ID")
  image_url      String       @unique
  coffee_shop_ID Int
  review_ID      Int
  coffee_shop    coffee_shops @relation(fields: [coffee_shop_ID], references: [id])
  review         reviews      @relation(fields: [review_ID], references: [id])
}

model bookmarks {
  coffee_shop_ID Int
  user_ID        Int
  coffee_shop    coffee_shops @relation(fields: [coffee_shop_ID], references: [id], onDelete: Cascade)
  user           users        @relation(fields: [user_ID], references: [id], onDelete: Cascade)

  @@id([coffee_shop_ID, user_ID])
}

model categories {
  id                     Int                      @id @default(autoincrement()) @map("category_ID")
  name                   String                   @unique
  description            String?                  @db.VarChar(255)
  coffee_shop_categories coffee_shop_categories[]
}

model devices {
  id                  Int                   @id @default(autoincrement()) @map("device_ID")
  name                String                @unique
  coffee_shop_devices coffee_shop_devices[]
}

model coffee_shop_categories {
  coffee_shop_ID Int
  category_ID    Int
  category       categories   @relation(fields: [category_ID], references: [id], onDelete: Cascade)
  coffee_shop    coffee_shops @relation(fields: [coffee_shop_ID], references: [id], onDelete: Cascade)

  @@id([coffee_shop_ID, category_ID])
}

model coffee_shop_devices {
  coffee_shop_ID Int
  device_ID      Int
  quantity       Int
  status         String       @db.VarChar(255)
  coffee_shop    coffee_shops @relation(fields: [coffee_shop_ID], references: [id], onDelete: Cascade)
  device         devices      @relation(fields: [device_ID], references: [id], onDelete: Cascade)

  @@id([coffee_shop_ID, device_ID])
}
